// Generated by CoffeeScript 1.7.1
(function() {
  var $, app,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = window.jQuery;

  app = window.gifdropApp = {
    init: function() {
      this.images = new this.Images(_.toArray(gifdropSettings.attachments));
      this.view = new this.ImagesListView({
        collection: this.images
      });
      return this.view.init();
    }
  };

  $(function() {
    var uploadError, uploadFilesAdded, uploadProgress, uploadStart, uploadSuccess, uploader;
    uploadProgress = function(uploader, file) {
      return console.log('uploadProgress');
    };
    uploadStart = function(uploader) {
      return console.log('uploadStart');
    };
    uploadError = function() {
      return alert('error');
    };
    uploadSuccess = function(attachment) {
      var full, unanimated;
      console.log(attachment);
      full = attachment.attributes.sizes.full;
      unanimated = attachment.attributes.sizes['full-gif-static'] || full;
      return app.images.add({
        id: attachment.id,
        width: full.width,
        height: full.height,
        src: full.url,
        "static": unanimated.url
      });
    };
    uploadFilesAdded = function(uploader, files) {
      return $.each(files, function(i, file) {
        if (i > 0) {
          return uploader.removeFile(file);
        }
      });
    };
    uploader = new wp.Uploader({
      container: $('.wrapper'),
      browser: $('.browser'),
      dropzone: $('.wrapper'),
      success: uploadSuccess,
      error: uploadError,
      params: {
        post_id: gifdropSettings.id,
        provide_full_gif_static: true
      },
      supports: {
        dragdrop: true
      },
      plupload: {
        runtimes: "html5",
        filters: [
          {
            title: "Image",
            extensions: "jpg,jpeg,gif,png"
          }
        ]
      }
    });
    if (uploader.supports.dragdrop) {
      uploader.uploader.bind("BeforeUpload", uploadStart);
      uploader.uploader.bind("UploadProgress", uploadProgress);
      return uploader.uploader.bind("FilesAdded", uploadFilesAdded);
    } else {
      uploader.uploader.destroy();
      return uploader = null;
    }
  });

  app.View = (function(_super) {
    __extends(View, _super);

    function View() {
      return View.__super__.constructor.apply(this, arguments);
    }

    View.prototype.render = function() {
      var result;
      result = View.__super__.render.apply(this, arguments);
      if (typeof this.postRender === "function") {
        this.postRender();
      }
      return result;
    };

    return View;

  })(wp.Backbone.View);

  app.Image = (function(_super) {
    __extends(Image, _super);

    function Image() {
      return Image.__super__.constructor.apply(this, arguments);
    }

    return Image;

  })(Backbone.Model);

  app.Images = (function(_super) {
    __extends(Images, _super);

    function Images() {
      return Images.__super__.constructor.apply(this, arguments);
    }

    Images.prototype.model = app.Image;

    return Images;

  })(Backbone.Collection);

  app.ImagesListView = (function(_super) {
    __extends(ImagesListView, _super);

    function ImagesListView() {
      return ImagesListView.__super__.constructor.apply(this, arguments);
    }

    ImagesListView.prototype.template = wp.template('gifs');

    ImagesListView.prototype.masonryEnabled = false;

    ImagesListView.prototype.initialize = function() {
      this.listenTo(this.collection, 'add', this.addNew);
      return this.listenTo(this, 'prependedView', this.prependedView);
    };

    ImagesListView.prototype.prependedView = function(item) {
      if (this.masonryEnabled) {
        return this.$gifs.isotope('prepended', item);
      }
    };

    ImagesListView.prototype.addNew = function(model, collection, options) {
      return this.addView(model, {
        at: 0
      });
    };

    ImagesListView.prototype.addView = function(model, options) {
      return this.views.add('.giflist', new app.ImageListView({
        model: model
      }), options);
    };

    ImagesListView.prototype.addSubviews = function() {
      var gif, _i, _len, _ref, _results;
      _ref = this.collection.models;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        gif = _ref[_i];
        _results.push(this.addView(gif));
      }
      return _results;
    };

    ImagesListView.prototype.init = function() {
      this.addSubviews();
      this.render();
      $('.gifs').replaceWith(this.el);
      this.views.ready();
      return this.masonry();
    };

    ImagesListView.prototype.postRender = function() {
      return this.$gifs = this.$('.giflist');
    };

    ImagesListView.prototype.masonry = function() {
      this.masonryEnabled = true;
      return this.$gifs.isotope({
        layoutMode: 'masonry',
        itemSelector: '.gif',
        masonry: {
          columnWidth: 50
        }
      });
    };

    return ImagesListView;

  })(app.View);

  app.ImageListView = (function(_super) {
    __extends(ImageListView, _super);

    function ImageListView() {
      return ImageListView.__super__.constructor.apply(this, arguments);
    }

    ImageListView.prototype.className = 'gif';

    ImageListView.prototype.template = wp.template('gif');

    ImageListView.prototype.events = {
      'mouseover': 'mouseover',
      'mouseout': 'mouseout'
    };

    ImageListView.prototype.prepare = function() {
      return this.model.toJSON();
    };

    ImageListView.prototype.mouseover = function() {
      return this.$img.attr({
        src: this.model.get('src')
      });
    };

    ImageListView.prototype.mouseout = function() {
      return this.$img.attr({
        src: this.model.get('static')
      });
    };

    ImageListView.prototype.postRender = function() {
      this.$img = this.$('img');
      return this.views.parent.trigger('prependedView', this.$el);
    };

    return ImageListView;

  })(app.View);

  $(function() {
    return app.init();
  });

}).call(this);


//# sourceMappingURL=gifdrop.map
