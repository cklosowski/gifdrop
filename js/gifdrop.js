// Generated by CoffeeScript 1.7.1
(function() {
  var $, app,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = window.jQuery;

  app = window.gifdropApp = {};

  $(function() {
    var uploadError, uploadFilesAdded, uploadProgress, uploadStart, uploadSuccess, uploader;
    uploadProgress = function(uploader, file) {
      return console.log('uploadProgress');
    };
    uploadStart = function(uploader) {
      return console.log('uploadStart');
    };
    uploadError = function() {
      return alert('error');
    };
    uploadSuccess = function(attachment) {
      var img;
      console.log(attachment);
      img = attachment.attributes.sizes.full;
      return app.images.add({
        id: attachment.id,
        width: img.width,
        height: img.height,
        url: img.url
      });
    };
    uploadFilesAdded = function(uploader, files) {
      return $.each(files, function(i, file) {
        if (i > 0) {
          return uploader.removeFile(file);
        }
      });
    };
    uploader = new wp.Uploader({
      container: $('.wrapper'),
      browser: $('.browser'),
      dropzone: $('.dropzone'),
      success: uploadSuccess,
      error: uploadError,
      params: {
        post_id: gifdropSettings.id
      },
      supports: {
        dragdrop: true
      },
      plupload: {
        runtimes: "html5",
        filters: [
          {
            title: "Image",
            extensions: "jpg,jpeg,gif,png"
          }
        ]
      }
    });
    if (uploader.supports.dragdrop) {
      uploader.uploader.bind("BeforeUpload", uploadStart);
      uploader.uploader.bind("UploadProgress", uploadProgress);
      uploader.uploader.bind("FilesAdded", uploadFilesAdded);
    } else {
      uploader.uploader.destroy();
      uploader = null;
    }
    return app.images = new app.Images(_.toArray(gifdropSettings.attachments));
  });

  app.Image = (function(_super) {
    __extends(Image, _super);

    function Image() {
      return Image.__super__.constructor.apply(this, arguments);
    }

    return Image;

  })(Backbone.Model);

  app.Images = (function(_super) {
    __extends(Images, _super);

    function Images() {
      return Images.__super__.constructor.apply(this, arguments);
    }

    Images.prototype.model = app.Image;

    return Images;

  })(Backbone.Collection);

}).call(this);


//# sourceMappingURL=gifdrop.map
